package lila.first;

public class Account {
    private Rmb rmbBalance;
	
	private Dollar dollarBalance;

	private static Account account = null;
	
	private Account(Rmb rmb, Dollar dollar) {
		this.rmbBalance = rmb;
		this.dollarBalance = dollar;
	}
	
	public static Account getInstance() {
		if (account == null) {
			account = new Account(new Rmb(1000000000.00), new Dollar(10.00));
		}
		
		return account;
	}
	
	public Rmb getRmbBalance() {
		return rmbBalance;
	}

	public void setRmbBalance(Rmb rmbBalance) {
		this.rmbBalance = rmbBalance;
	}

	public Dollar getDollarBalance() {
		return dollarBalance;
	}

	public void setDollarBalance(Dollar dollarBalance) {
		this.dollarBalance = dollarBalance;
	}
	
	public boolean hasBalance(Money money) {
		Boolean hasBalance = true;
		Double balance = this.rmbBalance.getAmount() * this.rmbBalance.getExangeRate() 
				+ this.dollarBalance.getAmount() * this.dollarBalance.getExangeRate();
		
		if (balance.compareTo(money.getAmount() * money.getExangeRate()) < 0) {
			hasBalance = false;
		}
		
		return hasBalance;
	}
}

/**
 * 
 */
package lila.first;

import java.util.Scanner;

/**
 * @author Lila Zhou
 *
 */
public class Atm {

    /**
	 * @param args
	 */
	public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Util util = new Util();

        System.out.println("Welcome to use Lila Bank's ATM");

        Integer op = null;
        Operation operation = null;
        do {
            System.out.println("Please choose one operation:");
            System.out.println("1. Deposit; 2. Withdrawal");
            op = scanner.nextInt();
            operation = util.validateOperation(op);
        } while (operation == null);

        Integer c = null;
        Currency currency = null;
        do {
        	System.out.println("Please choose one currency:");
            System.out.println("1. RMB; 2. Dollar");
        	c = scanner.nextInt();
        	currency = util.validateCurrency(c);
        } while (currency == null);

         

        Double amount = null;
        Money money = null;
        do {
        	System.out.printf("Please enter correct amount, between 0 and %.2f:", Util.MAX_TRADE_MONEY);
        	amount = scanner.nextDouble();
        	money = util.formatMoney(amount, currency);
        } while (null == money);

        Bank bank = new Bank(operation, money, Account.getInstance());
        if (bank.Operate()) {
        	Account account = Account.getInstance();
        	System.out.printf(
        	    "Your Rmb Balance is %s, and your Dollar balance is %s.%n", 
        	    account.getRmbBalance().toString(),
        	    account.getDollarBalance().toString()
			);
        	System.out.println("Thank you for using Lila bank's ATM");
        }
        else {
        	System.out.println("Your balance is not enough.");
        }
	}

}
package lila.first;

public class Bank {
    private Operation operation;
	
	private Account account;
	
	private Money money;
	
	public Bank(Operation operation, Money money, Account account) {
		this.operation = operation;
		this.money = money;
		this.account = account;
	}
	
	public Boolean Operate() {
 		Boolean isSucceed = false;
 		
		switch (this.operation)  {
        case DEPOSIT:
        	isSucceed = this.deposit();
        	break;
        case WITHDRAWAL:
        	isSucceed = this.withdrawal();
        }	

		return isSucceed;
    }
	
	public Boolean deposit() {
		Boolean isSucceed = false;
		
		Money balance = null;
		balance = this.getAccountBalance(balance, this.money.getCurrency());		
		if (balance != null) {
			balance.setAmount(balance.getAmount() + this.money.getAmount());
			isSucceed = true;
		}
		
		return isSucceed;
	}
	
	public Boolean withdrawal() {
		Boolean isSucceed = false;

		if (this.account.hasBalance(this.money)) {
			if (this.withdraw(this.money.getCurrency())) {
				for (Currency c : Currency.values()) {
					if (c == this.money.getCurrency()) {
						continue;
					}
					if (!this.withdraw(c)) {
						break;
					}
		        }
			}
			
			isSucceed = true;
		}

		return isSucceed;
	}
	
	private Money getAccountBalance(Money balance, Currency currency) {
		switch (currency) {
		case RMB :
			balance = this.account.getRmbBalance();
			break;
		case DOLLAR:
			balance = this.account.getDollarBalance();
			break;
		}
		
		return balance;
	}

	private Boolean withdraw(Currency currency) {
		Money balance = null;
		balance = this.getAccountBalance(balance, currency);
		Boolean needContinue = false;
		if (balance != null) {
			balance.setAmount((balance.getAmount() * balance.getExangeRate() - this.money.getAmount() * this.money.getExangeRate()) / balance.getExangeRate());
			if (balance.getAmount().compareTo(0.00) < 0) {
				needContinue = true;
				this.money.setAmount(this.money.getAmount() + balance.getAmount() * balance.getExangeRate() / this.money.getExangeRate());
				balance.setAmount(0.00);				
			} 
		}

		return needContinue;
	}
}
package lila.first;

public enum Currency {
    RMB(1), DOLLAR(2);
    private final Integer value;

    private Currency(Integer value) {
        this.value = value;
    }

    public Integer getValue() {
        return this.value;
    }
}
package lila.first;

public class Dollar extends Money {
    public Dollar(Double amount) {
        super(amount);
        super.setCurrency(Currency.DOLLAR);
        super.setSymbol('$');
        super.setExangeRate(6.32);
    }
}
package lila.first;

import java.text.DecimalFormat;

public class Money {
    private Currency currency;

	private char symbol;

    private char decimal = 2;

    private char thousandsSeprater = ',';

    private Double exangeRate = 1.00;

    private Double amount;

	public Currency getCurrency() {
		return currency;
	}

	protected void setCurrency(Currency currency) {
		this.currency = currency;
	}
    
    public Money(Double amount) {
        this.amount = amount;
    }

    public char getSymbol() {
        return symbol;
    }

    protected void setSymbol(char symbol) {
        this.symbol = symbol;
    }

    public char getDecimal() {
        return decimal;
    }

    public char getThousandsSeprater() {
        return thousandsSeprater;
    }

    protected void setThousandsSeprater(char thousandsSeprater) {
        this.thousandsSeprater = thousandsSeprater;
    }

    public double getExangeRate() {
        return exangeRate;
    }

    protected void setExangeRate(Double d) {
        this.exangeRate = d;
    }

    public Double getAmount() {
        return amount;
    }

    public void setAmount(Double amount) {
        this.amount = amount;
    }
    
	public String toString() {
		DecimalFormat df1 = new DecimalFormat("0.00");
		return this.getSymbol() + df1.format(this.getAmount());
	}
}
package lila.first;

public enum Operation {
    DEPOSIT(1), WITHDRAWAL(2);

    public final Integer value;

    private Operation(Integer value) {
        this.value = value;
    }

    public Integer getValue() {
        return this.value;
    }
}
package lila.first;

public class Rmb extends Money {
    public Rmb(Double amount) {
        super(amount);
        super.setCurrency(Currency.RMB);
        super.setSymbol('Â¥');
        super.setExangeRate(1.00);
    }
}
package lila.first;

public class Util {
    public static final double MAX_TRADE_MONEY = 1000000000000.00;
	
	public Money formatMoney(Double amount, Currency currency) {
        Money money = null;
        
        if (this.validateAmount(amount)) {
        	switch (currency) {
        	case RMB:
        		money = new Rmb(amount);
        		break;
        	case DOLLAR:
        		money = new Dollar(amount);
        		break;
        	}
        }
        
        return money;
    }

	private boolean validateAmount(Double amount) {
		Boolean isAllowedAmount = true;
		
		if (amount.compareTo(0.00) <= 0) {
			isAllowedAmount = false;
		} else if (amount.compareTo(MAX_TRADE_MONEY) > 0) {
			isAllowedAmount = false;
		}
		
		return isAllowedAmount;
	}
	
    public Operation validateOperation(Integer operation) {
        Operation result = null;
        for (Operation o : Operation.values()) {
            if (operation == o.getValue()) {
            	result = o;
                break;
            }
        }

        return result;
    }

    public Currency validateCurrency(Integer currency) {
        Currency result = null;
        for (Currency c : Currency.values()) {
            if (currency == c.getValue()) {
            	result = c;
                break;
            }
        }

        return result;
    }
}
